import click
import prosecode.tangle
import prosecode.weave
import os
from pygments.formatters import LatexFormatter

@click.group()
def cli():
    pass

@cli.command()
@click.argument('mdfile', type = click.File('r'))
@click.option('--srcdir', default = './',
                help='Where to put the generated source code.')
def tangle(mdfile, srcdir):
    """
    Process the markdown file `mdfile`, extracting all code.
    The code is placed in the directory given in the option `--srcdir`.
    """
    md = mdfile.read()
    tangled = prosecode.tangle.tangle(md)
    for name, chunk in tangled.items():
        name = name.replace('.', '/')
        with open(srcdir + name + '.py', 'w') as outfile:
            outfile.write(chunk.fullstr())

    click.echo('Tangled the code to ' + srcdir + '.')

@cli.command()
@click.argument('mdfile', type = click.Path())
@click.option('--execute/--noexecute', default = False,
                help='Should the code chunks be executed?')
@click.option('--executepath', default = '', type = click.Path(),
                help='Where should the code chunks be executed?')
@click.option('--outfile', default = False, help='The file to save to.')
@click.option('--format',
                type=click.Choice(['latex', 'html'], case_sensitive=False),
                default = 'latex', help='Output format `latex` or `html`.')
def weave(mdfile, execute, executepath, outfile, format):
    """
    Process the markdown file `mdfile` into a LaTeX or HTML document.

    If `--execute` is set to `True`, then the blocks of code will be executed
    and their output placed in the text.

    The `--format` option specifies the output format.  Valid options are
    `latex` or `html`.

    The output file is specified in the `--outfile` field.  If omitted, it
    will simple change the extension on the input file from `.md` to `.tex`.
    """
    if executepath == '':
        executepath = os.path.dirname(mdfile)
    with open(mdfile, 'r') as f:
        md = f.read()
    if format.lower() == 'latex':
        woven = prosecode.weave.latexweave(md, execute, executepath)
        extension = '.tex'
    elif format.lower() == 'html':
        woven = prosecode.weave.htmlweave(md, execute, executepath)
        extension = '.html'
    else:
        click.echo('Only `html` and `latex` are valid --format options.')
        return 1

    if outfile == False:
        outfile = mdfile.replace('.md', extension)
    with open(outfile, 'w') as f:
        f.write(woven)

    click.echo('Wove the code.')

@cli.command()
@click.option('--outfile', default = 'pygment_style_defs.tex',
                help='Where to put the generated source code.')
def styledefs(outfile):
    """
    Generate the LaTeX style definitions to be used in building the code.

    The `--outfile` option tells where to save it.
    """
    with open(outfile, 'w') as styledefsfile:
        styledefsfile.write(LatexFormatter().get_style_defs())
    click.echo('Wrote the latex style definitions to ' + outfile + '.')

@cli.command()
@click.argument('mdfile')
@click.option('--srcdir', default = './',
                help='Where to put the generated source code.')
def cleanup(mdfile, srcdir):
    """
    Delete all of the code generated by the tangling of the markdown file.
    """
    with open(mdfile, 'r') as f:
        md = f.read()
    filenames = prosecode.tangle.tangle(md)
    for name in filenames:
        filename = srcdir + name.replace('.', '/') + '.py'
        click.echo('Deleting ' + filename)
        os.remove(filename)

    click.echo('Finished cleaning ' + mdfile + '.')
